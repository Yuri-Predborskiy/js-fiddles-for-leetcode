// use inputs as a map of islands
// time complexity: O(n) (single-pass, we access same node multiple times, but the number is static)
// space complexity: O(1) or O(n) if we make a copy of inputs

/**
 * @param {string[][]} grid
 * @return {number}
 */
let numIslands = function(grid) {
    function sinkIsland(startRow, startCol) {
        const stack = [{row: startRow, col: startCol}];
        while (stack.length > 0) {
            let {row, col} = stack.pop();
            grid[row][col] = '0';
            if (row > 0 && grid[row - 1][col] === '1') {
                stack.push({row: row - 1, col});
            }
            if (col > 0 && grid[row][col - 1] === '1') {
                stack.push({row, col: col - 1});
            }
            if (row + 1 < grid.length && grid[row + 1][col] === '1') {
                stack.push({row: row + 1, col});
            }
            if (col + 1 < grid[0].length && grid[row][col + 1] === '1') {
                stack.push({row, col: col + 1});
            }
        }
    }

    let islands = 0;
    for (let row = 0; row < grid.length; row++) {
        for (let col = 0; col < grid[0].length; col++) {
            if (grid[row][col] === '1') {
                islands++;
                sinkIsland(row, col);
            }
        }
    }
    return islands;
};

let tests = [
    {
        params: [
            [
                ['1', '1', '1', '1'],
                ['1', '1', '1', '1'],
                ['1', '1', '0', '0'],
                ['1', '1', '0', '1'],
            ]
        ],
        ans: 2,
    },
    {
        params: [
            [
                ['1','0','0','1','1','1','0','1','1','0','0','0','0','0','0','0','0','0','0','0'],
                ['1','0','0','1','1','0','0','1','0','0','0','1','0','1','0','1','0','0','1','0'],
                ['0','0','0','1','1','1','1','0','1','0','1','1','0','0','0','0','1','0','1','0'],
                ['0','0','0','1','1','0','0','1','0','0','0','1','1','1','0','0','1','0','0','1'],
                ['0','0','0','0','0','0','0','1','1','1','0','0','0','0','0','0','0','0','0','0'],
                ['1','0','0','0','0','1','0','1','0','1','1','0','0','0','0','0','0','1','0','1'],
                ['0','0','0','1','0','0','0','1','0','1','0','1','0','1','0','1','0','1','0','1'],
                ['0','0','0','1','0','1','0','0','1','1','0','1','0','1','1','0','1','1','1','0'],
                ['0','0','0','0','1','0','0','1','1','0','0','0','0','1','0','0','0','1','0','1'],
                ['0','0','1','0','0','1','0','0','0','0','0','1','0','0','1','0','0','0','1','0'],
                ['1','0','0','1','0','0','0','0','0','0','0','1','0','0','1','0','1','0','1','0'],
                ['0','1','0','0','0','1','0','1','0','1','1','0','1','1','1','0','1','1','0','0'],
                ['1','1','0','1','0','0','0','0','1','0','0','0','0','0','0','1','0','0','0','1'],
                ['0','1','0','0','1','1','1','0','0','0','1','1','1','1','1','0','1','0','0','0'],
                ['0','0','1','1','1','0','0','0','1','1','0','0','0','1','0','1','0','0','0','0'],
                ['1','0','0','1','0','1','0','0','0','0','1','0','0','0','1','0','1','0','1','1'],
                ['1','0','1','0','0','0','0','0','0','1','0','0','0','1','0','1','0','0','0','0'],
                ['0','1','1','0','0','0','1','1','1','0','1','0','1','0','1','1','1','1','0','0'],
                ['0','1','0','0','0','0','1','1','0','0','1','0','1','0','0','1','0','0','1','1'],
                ['0','0','0','0','0','0','1','1','1','1','0','1','0','0','0','1','1','0','0','0']
            ],
        ],
        ans: 58
    },
    {
        params: [
            [
                ["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
                ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
                ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
                ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
                ["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]
            ],
        ],
        ans: 1
    },
    {
        params: [
            [
                ['0','1','0'],
                ['1','0','1'],
                ['0','1','0'],
            ],
        ],
        ans: 4
    },
    {
        params: [
            [
                ['1','1','1','1','0'],
                ['1','1','0','1','0'],
                ['1','1','0','0','0'],
                ['0','0','0','0','0'],
            ],
        ],
        ans: 1
    },
    {
        params: [
            [
                ['1','1','1','1','0'],
                ['1','1','0','1','0'],
                ['1','1','0','0','1'],
                ['0','0','1','1','1'],
            ],
        ],
        ans: 2
    },
    {
        params: [
            [
                ['1','1','0','0','0'],
                ['1','1','0','0','0'],
                ['0','0','1','0','0'],
                ['0','0','0','1','1'],
            ],
        ],
        ans: 3 // 3 separate groups of 1s that have 0 around them (up left right bottom)
    },
];

tests.forEach(test => {
    let res = numIslands(...test.params);
    let correct = res === test.ans;
    console.log('expected:', test.ans, '| calculated:', res, '| result is', correct ? 'CORRECT' : 'WRONG!');
});
