/**
 * @param {string[][]} grid
 * @return {number}
 */
let numIslands = function(grid) {
    function ListNode(val) {
        this.val = val;
        this.next = null;
    }

    function Queue() {
        this.head = this.tail = null;
    }
    Queue.prototype.push = function(val) {
        if (this.isEmpty()) {
            this.head = this.tail = new ListNode(val);
        } else {
            this.tail.next = new ListNode(val);
            this.tail = this.tail.next;
        }
    };
    Queue.prototype.pop = function() {
        if (this.isEmpty()) {
            return null;
        }
        let val = this.head.val;
        this.head = this.head.next;
        return val;
    };
    Queue.prototype.isEmpty = function() {
        return this.head === null;
    };

    function processIsland(i) {
        function isInBounds(row, col) {
            return (
                row < grid.length &&
                row >= 0 &&
                col < grid[0].length &&
                col >= 0
            );
        }

        islands++;
        visited[i] = true;
        let lands = new Queue();
        lands.push(i);
        while (!lands.isEmpty()) {
            let i = lands.pop();
            let {row, col} = indexToRowCol(i);
            if (isInBounds(row, col - 1) && isItUnvisitedLand(i - 1)) { // left
                lands.push(i - 1);
                visited[i - 1] = true;
            }
            if (isInBounds(row - 1, col) && isItUnvisitedLand(i - cl)) { // top
                lands.push(i - cl);
                visited[i - cl] = true;
            }
            if (isInBounds(row, col + 1) && isItUnvisitedLand(i + 1)) { // right
                lands.push(i + 1);
                visited[i + 1] = true;
            }
            if (isInBounds(row + 1, col) && isItUnvisitedLand(i + cl)) { // bottom
                lands.push(i + cl);
                visited[i + cl] = true;
            }
        }
    }

    let visited = [], islands = 0;

    function indexToRowCol(i) {
        return {row: Math.floor(i / cl), col: i % cl};
    }

    function isItUnvisitedLand(i) {
        let {row, col} = indexToRowCol(i);
        return !visited[i] && grid[row][col] === '1';
    }

    let cl = grid[0].length, maxLength = grid.length * cl;
    for (let i = 0; i < maxLength; i++) {
        if (isItUnvisitedLand(i)) {
            processIsland(i);
        }
    }

    return islands;
};

let tests = [
    {
        params: [
            [
                ['1', '1', '1', '1'],
                ['1', '1', '1', '1'],
                ['1', '1', '0', '0'],
                ['1', '1', '0', '1'],
            ]
        ],
        ans: 2,
    },
    {
        params: [
            [
                ['1','0','0','1','1','1','0','1','1','0','0','0','0','0','0','0','0','0','0','0'],
                ['1','0','0','1','1','0','0','1','0','0','0','1','0','1','0','1','0','0','1','0'],
                ['0','0','0','1','1','1','1','0','1','0','1','1','0','0','0','0','1','0','1','0'],
                ['0','0','0','1','1','0','0','1','0','0','0','1','1','1','0','0','1','0','0','1'],
                ['0','0','0','0','0','0','0','1','1','1','0','0','0','0','0','0','0','0','0','0'],
                ['1','0','0','0','0','1','0','1','0','1','1','0','0','0','0','0','0','1','0','1'],
                ['0','0','0','1','0','0','0','1','0','1','0','1','0','1','0','1','0','1','0','1'],
                ['0','0','0','1','0','1','0','0','1','1','0','1','0','1','1','0','1','1','1','0'],
                ['0','0','0','0','1','0','0','1','1','0','0','0','0','1','0','0','0','1','0','1'],
                ['0','0','1','0','0','1','0','0','0','0','0','1','0','0','1','0','0','0','1','0'],
                ['1','0','0','1','0','0','0','0','0','0','0','1','0','0','1','0','1','0','1','0'],
                ['0','1','0','0','0','1','0','1','0','1','1','0','1','1','1','0','1','1','0','0'],
                ['1','1','0','1','0','0','0','0','1','0','0','0','0','0','0','1','0','0','0','1'],
                ['0','1','0','0','1','1','1','0','0','0','1','1','1','1','1','0','1','0','0','0'],
                ['0','0','1','1','1','0','0','0','1','1','0','0','0','1','0','1','0','0','0','0'],
                ['1','0','0','1','0','1','0','0','0','0','1','0','0','0','1','0','1','0','1','1'],
                ['1','0','1','0','0','0','0','0','0','1','0','0','0','1','0','1','0','0','0','0'],
                ['0','1','1','0','0','0','1','1','1','0','1','0','1','0','1','1','1','1','0','0'],
                ['0','1','0','0','0','0','1','1','0','0','1','0','1','0','0','1','0','0','1','1'],
                ['0','0','0','0','0','0','1','1','1','1','0','1','0','0','0','1','1','0','0','0']
            ],
        ],
        ans: 58
    },
    {
        params: [
            [
                ["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
                ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
                ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
                ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
                ["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]
            ],
        ],
        ans: 1
    },
    {
        params: [
            [
                ['0','1','0'],
                ['1','0','1'],
                ['0','1','0'],
            ],
        ],
        ans: 4
    },
    {
        params: [
            [
                ['1','1','1','1','0'],
                ['1','1','0','1','0'],
                ['1','1','0','0','0'],
                ['0','0','0','0','0'],
            ],
        ],
        ans: 1
    },
    {
        params: [
            [
                ['1','1','1','1','0'],
                ['1','1','0','1','0'],
                ['1','1','0','0','1'],
                ['0','0','1','1','1'],
            ],
        ],
        ans: 2
    },
    {
        params: [
            [
                ['1','1','0','0','0'],
                ['1','1','0','0','0'],
                ['0','0','1','0','0'],
                ['0','0','0','1','1'],
            ],
        ],
        ans: 3 // 3 separate groups of 1s that have 0 around them (up left right bottom)
    },
];

tests.forEach(test => {
    let res = numIslands(...test.params);
    let correct = res === test.ans;
    console.log('expected:', test.ans, '| calculated:', res, '| result is', correct ? 'CORRECT' : 'WRONG!');
});
